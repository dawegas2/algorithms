Обход двоичного дерева
Построить in-order, pre-order и post-order обходы данного двоичного дерева.
Вход. Двоичное дерево.
Выход. Все его вершины в трёх разных порядках: in-order,pre-order и post-order.
In-order обход соответствует следующей рекурсивной процедуре,получающей на вход корень v текущего
поддерева: произвести рекурсивный вызов для v.left, напечатать v.key, произвести рекурсивный вызов для
v.right. Pre-order обход: напечатать v.key, произвести рекурсивный вызов для v.left, произвести
рекурсивный вызов для v.right. Post-order: произвести рекурсивный вызов для v.left, произвести
рекурсивный вызов для v.right, напечатать v.key.

Формат входа. Первая строка содержит число вершин n. Вершины
дерева пронумерованы числами от 0 до n−1. Вершина 0 является
корнем. Каждая из следующих n строк содержит информацию о
вершинах 0, 1, ..., n−1: i-я строка задаёт числа keyi, lefti и righti, где keyi — ключ вершины i,
lefti — индекс левого сына вершины i, а righti — индекс правого сына вершины i. Если у вершины i
нет одного или обоих сыновей, соответствующее значение равно −1.

Формат выхода. Три строки: in-order, pre-order и post-order обходы.
Ограничения. 1 ≤ n ≤ 10^5; 0 ≤ keyi ≤ 10^9; −1 ≤ lefti,righti ≤ n − 1.
Гарантируется, что вход задаёт корректное двоичное дерево: в частности, если lefti != −1 и righti
!= −1, то lefti != righti; никакая вершина не является сыном двух вершин;
каждая вершина является потомком корня.

Пример.
Вход:
5
4 1 2
2 3 4
5 -1 -1
1 -1 -1
3 -1 -1
Выход:
1 2 3 4 5
4 2 1 3 5
1 3 2 5 4